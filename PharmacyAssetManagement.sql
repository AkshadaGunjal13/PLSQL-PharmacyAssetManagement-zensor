CREATE TABLE Assets (
    asset_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    asset_name VARCHAR2(100) NOT NULL,
    asset_type VARCHAR2(50),
    quantity NUMBER DEFAULT 0,
    cost_per_unit NUMBER,
    purchase_date DATE DEFAULT SYSDATE
);

CREATE TABLE Suppliers (
    supplier_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    supplier_name VARCHAR2(100) NOT NULL,
    contact_number VARCHAR2(15),
    address VARCHAR2(255)
);

CREATE TABLE Transactions (
    transaction_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    asset_id NUMBER REFERENCES Assets(asset_id),
    transaction_type VARCHAR2(10) CHECK (transaction_type IN ('IN', 'OUT')),
    quantity NUMBER,
    transaction_date DATE DEFAULT SYSDATE,
    supplier_id NUMBER REFERENCES Suppliers(supplier_id)
);

-- Inserting assets into the Assets table
INSERT INTO Assets (asset_name, asset_type, quantity, cost_per_unit, purchase_date) 
VALUES ('Laptop', 'Electronics', 50, 50000, TO_DATE('2023-01-15', 'YYYY-MM-DD'));

INSERT INTO Assets (asset_name, asset_type, quantity, cost_per_unit, purchase_date) 
VALUES ('Projector', 'Electronics', 10, 25000, TO_DATE('2023-03-10', 'YYYY-MM-DD'));

INSERT INTO Assets (asset_name, asset_type, quantity, cost_per_unit, purchase_date) 
VALUES ('Office Chair', 'Furniture', 100, 3000, TO_DATE('2022-11-01', 'YYYY-MM-DD'));

INSERT INTO Assets (asset_name, asset_type, quantity, cost_per_unit, purchase_date) 
VALUES ('Desktop Computer', 'Electronics', 30, 60000, TO_DATE('2023-02-20', 'YYYY-MM-DD'));


-- Inserting suppliers into the Suppliers table
INSERT INTO Suppliers (supplier_name, contact_number, address)
VALUES ('Tech Solutions Ltd.', '9876543210', '1234 Tech Park, Silicon Valley, CA');

INSERT INTO Suppliers (supplier_name, contact_number, address)
VALUES ('Furniture World', '9123456789', '56 Furniture Street, Commerce City, CO');

INSERT INTO Suppliers (supplier_name, contact_number, address)
VALUES ('Global Electronics', '9988776655', '789 Industrial Rd, New York, NY');


-- Inserting transactions into the Transactions table
INSERT INTO Transactions (asset_id, transaction_type, quantity, transaction_date, supplier_id)
VALUES (1, 'IN', 20, TO_DATE('2023-01-18', 'YYYY-MM-DD'), 1);

INSERT INTO Transactions (asset_id, transaction_type, quantity, transaction_date, supplier_id)
VALUES (2, 'IN', 5, TO_DATE('2023-03-12', 'YYYY-MM-DD'), 2);

INSERT INTO Transactions (asset_id, transaction_type, quantity, transaction_date, supplier_id)
VALUES (3, 'IN', 50, TO_DATE('2023-11-02', 'YYYY-MM-DD'), 1);

INSERT INTO Transactions (asset_id, transaction_type, quantity, transaction_date, supplier_id)
VALUES (4, 'OUT', 10, TO_DATE('2023-04-10', 'YYYY-MM-DD'), 3);

INSERT INTO Transactions (asset_id, transaction_type, quantity, transaction_date, supplier_id)
VALUES (1, 'OUT', 5, TO_DATE('2023-05-15', 'YYYY-MM-DD'), 1);

select * from 

CREATE OR REPLACE PROCEDURE AddAsset (
    p_asset_name IN VARCHAR2,
    p_asset_type IN VARCHAR2,
    p_quantity IN NUMBER,
    p_cost_per_unit IN NUMBER
) AS
BEGIN
    INSERT INTO Assets (asset_name, asset_type, quantity, cost_per_unit)
    VALUES (p_asset_name, p_asset_type, p_quantity, p_cost_per_unit);
END;
/

EXEC AddAsset('Smartphone', 'Electronics', 100, 20000);
EXEC AddAsset('Office Desk', 'Furniture', 50, 8000);

select * from Assets;

CREATE OR REPLACE PROCEDURE UpdateAssetQuantity (
    p_asset_id IN NUMBER,
    p_quantity IN NUMBER
) AS
BEGIN
    UPDATE Assets
    SET quantity = quantity + p_quantity
    WHERE asset_id = p_asset_id;
END;
/

EXEC UpdateAssetQuantity(1, 10); 
select * from assets;

CREATE OR REPLACE PROCEDURE AddTransaction (
    p_asset_id IN NUMBER,
    p_transaction_type IN VARCHAR2,
    p_quantity IN NUMBER,
    p_supplier_id IN NUMBER
) AS
BEGIN
    INSERT INTO Transactions (asset_id, transaction_type, quantity, supplier_id)
    VALUES (p_asset_id, p_transaction_type, p_quantity, p_supplier_id);
END;
/

EXEC AddTransaction(1, 'IN', 50, 1); 
EXEC AddTransaction(2, 'OUT', 5, 2);

SELECT * FROM Transactions;


CREATE OR REPLACE FUNCTION GetAssetDetails (
    p_asset_id IN NUMBER
) RETURN VARCHAR2 IS
    v_details VARCHAR2(1000);
BEGIN
    SELECT 'Asset Name: ' || asset_name || ', Quantity: ' || quantity || ', Cost: ' || cost_per_unit
    INTO v_details
    FROM Assets
    WHERE asset_id = p_asset_id;
    RETURN v_details;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Asset not found';
END;
/

SELECT GetAssetDetails(1) FROM dual;
SELECT GetAssetDetails(999) FROM dual;

CREATE OR REPLACE TRIGGER update_asset_quantity
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
    -- Update the quantity in the Assets table when the transaction type is 'OUT'
    IF :NEW.transaction_type = 'OUT' THEN
        UPDATE Assets
        SET quantity = quantity - :NEW.quantity
        WHERE asset_id = :NEW.asset_id;
    END IF;
END;
/


INSERT INTO Transactions (asset_id, transaction_type, quantity, supplier_id)
VALUES (1, 'OUT', 5, 2);

SELECT asset_id, asset_name, quantity
FROM Assets
WHERE asset_id = 1;


CREATE TABLE AssetCategories (
    category_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_name VARCHAR2(100) NOT NULL,
    description VARCHAR2(255)
);

ALTER TABLE Assets
ADD category_id NUMBER REFERENCES AssetCategories(category_id);

INSERT INTO AssetCategories (category_name, description)
VALUES (1,'Electronics', 'All electronic devices such as laptops, desktops, etc.');

INSERT INTO AssetCategories (category_name, description)
VALUES (2,'Furniture', 'Office furniture including chairs, desks, etc.');

INSERT INTO AssetCategories (category_name, description)
VALUES (3,'Stationery', 'All types of office stationery such as pens, paper, etc.');

select * from AssetCategories;

INSERT INTO Assets (asset_name, asset_type, quantity, cost_per_unit, purchase_date, category_id)
VALUES ('Smartphone', 'Electronics', 100, 20000, TO_DATE('2023-06-01', 'YYYY-MM-DD'), 1);

select * from Assets;

CREATE OR REPLACE TRIGGER prevent_negative_asset_quantity
BEFORE INSERT ON Transactions
FOR EACH ROW
DECLARE
    v_current_quantity NUMBER;
BEGIN
    -- Check the current quantity of the asset
    SELECT quantity INTO v_current_quantity
    FROM Assets
    WHERE asset_id = :NEW.asset_id;

    IF :NEW.transaction_type = 'OUT' AND v_current_quantity < :NEW.quantity THEN
        RAISE_APPLICATION_ERROR(-20002, 'Insufficient quantity for this transaction.');
    END IF;
END;
/


SELECT asset_id, asset_name, quantity
FROM Assets
WHERE asset_id = 1;

INSERT INTO Transactions (asset_id, transaction_type, quantity, supplier_id)
VALUES (1, 'OUT', 5, 1); 

SELECT asset_id, asset_name, quantity
FROM Assets
WHERE asset_id = 1;
